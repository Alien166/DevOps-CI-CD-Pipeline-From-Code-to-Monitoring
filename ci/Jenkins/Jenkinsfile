pipeline {
  agent any
  parameters {
    string(name: 'build_version', defaultValue: 'V1.0', description: 'Build version to use for Docker image')
  }
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/Alien166/DevOps-CI-CD-Pipeline-From-Code-to-Monitoring.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd demo-java-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://localhost:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd demo-java-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "toba44/demo-java-app:${build_version}"
        REGISTRY_CREDENTIALS = credentials('dockerhub')
      }
      steps {
        script {
            sh 'cd demo-java-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "DevOps-CI-CD-Pipeline-From-Code-to-Monitoring"
            GIT_USER_NAME = "ŸêAlien166"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "abdowagieh@gmail.com"
                    git config user.name "Alien166"
                    sed -i "s/tag: .*/tag: \"${build_version}\"/" helm/app/values.yaml
                    git add helm/app/values.yaml
                    git commit -m "Update deployment image to version ${build_version}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
  post {
        success {
            slackSend channel: '#jenkins',
                      message: "Build SUCCESSFUL for version ${params.build_version}! üéâ",
                      color: 'good'
        }
        failure {
            slackSend channel: '#jenkins',
                      message: "Build FAILED for version ${params.build_version}! ‚ùå",
                      color: 'danger'
        }
        always {
            script {
                def qualityGate = sh(script: "curl -u $SONAR_AUTH_TOKEN: ${SONAR_URL}/api/qualitygates/project_status?projectKey=demo-java-app", returnStdout: true)
                slackSend channel: '#jenkins',
                          message: "SonarQube Quality Gate Report: \n${qualityGate}",
                          color: 'warning'
            }
        }
    }
}